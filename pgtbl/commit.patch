diff --git a/kernel/defs.h b/kernel/defs.h
index 59f7aae..3fe76ba 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -177,8 +177,23 @@ void            uvmclear(pagetable_t, uint64);
 uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
+//
+int             copyin_new(pagetable_t, char*, uint64, uint64);
+int             copyinstr_new(pagetable_t, char*, uint64, uint64);
+//
 int             copyinstr(pagetable_t, char *, uint64, uint64);
 int             test_pagetable();
+// + vmprint declaration
+void            vmprint(pagetable_t);
+// + kvminit_for_each_process, kvmmap_for_each_process declaration
+pagetable_t     kvminit_for_each_process(void);
+void            kvmmap_for_each_process(pagetable_t, uint64, uint64, uint64, int);
+void            kvminithart_for_each_process(pagetable_t);
+// + free_pagetable_except_for_leaf declaration
+void            free_pagetable_except_for_leaf(pagetable_t);
+int             sync_pagetable(pagetable_t, pagetable_t, uint64, uint64);
+// + uvmdealloc_u_in_k declaration
+uint64          uvmdealloc_u_in_k(pagetable_t, uint64, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index 7b8a524..e9bb82e 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -92,11 +92,20 @@ int exec(char *path, char **argv) {
   // Commit to the user image.
   oldpagetable = p->pagetable;
   p->pagetable = pagetable;
+
+  //
+  uvmdealloc_u_in_k(p->k_pagetable, p->sz, 0);
+  sync_pagetable(p->pagetable, p->k_pagetable, 0, sz);
+
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp;          // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  if (p->pid == 1) {
+    vmprint(p->pagetable);
+  }
+
   return argc;  // this ends up in a0, the first argument to main(argc, argv)
 
 bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index 292ccb8..811aa3f 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -37,6 +37,7 @@ void procinit(void) {
     uint64 va = KSTACK((int)(p - proc));
     kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
     p->kstack = va;
+    p->kstack_pa = (uint64)pa;
   }
   kvminithart();
 }
@@ -103,6 +104,14 @@ found:
     return 0;
   }
 
+  p->k_pagetable = kvminit_for_each_process();
+  if (p->k_pagetable == 0) {
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+  kvmmap_for_each_process(p->k_pagetable, p->kstack, p->kstack_pa, PGSIZE, PTE_R | PTE_W);
+
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
   if (p->pagetable == 0) {
@@ -136,6 +145,9 @@ static void freeproc(struct proc *p) {
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  if (p->k_pagetable) {
+    free_pagetable_except_for_leaf(p->k_pagetable);
+  }
 }
 
 // Create a user page table for a given process,
@@ -193,6 +205,9 @@ void userinit(void) {
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
+  // +
+  sync_pagetable(p->pagetable, p->k_pagetable, 0, p->sz);
+
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
@@ -216,8 +231,12 @@ int growproc(int n) {
     if ((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
       return -1;
     }
+    // +
+    sync_pagetable(p->pagetable, p->k_pagetable, p->sz, p->sz + n);
   } else if (n < 0) {
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    // +
+    uvmdealloc_u_in_k(p->k_pagetable, p->sz, p->sz + n);
   }
   p->sz = sz;
   return 0;
@@ -262,6 +281,9 @@ int fork(void) {
 
   np->state = RUNNABLE;
 
+  // +
+  sync_pagetable(np->pagetable, np->k_pagetable, 0, np->sz);
+
   release(&np->lock);
 
   return pid;
@@ -430,11 +452,13 @@ void scheduler(void) {
         // before jumping back to us.
         p->state = RUNNING;
         c->proc = p;
+        kvminithart_for_each_process(p->k_pagetable);
         swtch(&c->context, &p->context);
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
+        kvminithart();
 
         found = 1;
       }
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..830e2f9 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+   // + k_pagetable, kstack_pa
+  pagetable_t k_pagetable;
+  uint64 kstack_pa;
 };
diff --git a/kernel/vm.c b/kernel/vm.c
index b794885..2ff6cef 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -316,21 +316,22 @@ int copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len) {
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
 int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len) {
-  uint64 n, va0, pa0;
-
-  while (len > 0) {
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if (pa0 == 0) return -1;
-    n = PGSIZE - (srcva - va0);
-    if (n > len) n = len;
-    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
-
-    len -= n;
-    dst += n;
-    srcva = va0 + PGSIZE;
-  }
-  return 0;
+  // uint64 n, va0, pa0;
+
+  // while (len > 0) {
+  //   va0 = PGROUNDDOWN(srcva);
+  //   pa0 = walkaddr(pagetable, va0);
+  //   if (pa0 == 0) return -1;
+  //   n = PGSIZE - (srcva - va0);
+  //   if (n > len) n = len;
+  //   memmove(dst, (void *)(pa0 + (srcva - va0)), n);
+
+  //   len -= n;
+  //   dst += n;
+  //   srcva = va0 + PGSIZE;
+  // }
+  // return 0; 
+  return copyin_new(pagetable, dst, srcva, len); 
 }
 
 // Copy a null-terminated string from user to kernel.
@@ -338,44 +339,173 @@ int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len) {
 // until a '\0', or max.
 // Return 0 on success, -1 on error.
 int copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max) {
-  uint64 n, va0, pa0;
-  int got_null = 0;
+  // uint64 n, va0, pa0;
+  // int got_null = 0;
+
+  // while (got_null == 0 && max > 0) {
+  //   va0 = PGROUNDDOWN(srcva);
+  //   pa0 = walkaddr(pagetable, va0);
+  //   if (pa0 == 0) return -1;
+  //   n = PGSIZE - (srcva - va0);
+  //   if (n > max) n = max;
+
+  //   char *p = (char *)(pa0 + (srcva - va0));
+  //   while (n > 0) {
+  //     if (*p == '\0') {
+  //       *dst = '\0';
+  //       got_null = 1;
+  //       break;
+  //     } else {
+  //       *dst = *p;
+  //     }
+  //     --n;
+  //     --max;
+  //     p++;
+  //     dst++;
+  //   }
+
+  //   srcva = va0 + PGSIZE;
+  // }
+  // if (got_null) {
+  //   return 0;
+  // } else {
+  //   return -1;
+  // }
+  return copyinstr_new(pagetable, dst, srcva, max);
+}
 
-  while (got_null == 0 && max > 0) {
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if (pa0 == 0) return -1;
-    n = PGSIZE - (srcva - va0);
-    if (n > max) n = max;
-
-    char *p = (char *)(pa0 + (srcva - va0));
-    while (n > 0) {
-      if (*p == '\0') {
-        *dst = '\0';
-        got_null = 1;
-        break;
+// check if use global kpgtbl or not
+int test_pagetable() {
+  uint64 satp = r_satp();
+  uint64 gsatp = MAKE_SATP(kernel_pagetable);
+  printf("test_pagetable: %d\n", satp != gsatp);
+  return satp != gsatp;
+}
+
+void print_pgtbl(pagetable_t pgtbl, int depth, long virt) {
+  virt <<= 9;  // + 拿到上一层的虚拟地址，需要先左移9位，方便加上下一级页表号
+  for (int i = 0; i < 512; i++) {
+    pte_t pte = pgtbl[i];       // 获取每一条pte
+    if (pte & PTE_V) {          // 如果pte有效
+      uint64 pa = PTE2PA(pte);  // 求出pa
+      char prefix[16] = "||";
+      int str_end = 2;
+      for (int j = depth; j > 0; j--) {
+        prefix[str_end] = ' ';
+        prefix[str_end + 1] = '|';
+        prefix[str_end + 2] = '|';
+        str_end += 3;
+      }
+      printf(prefix);
+      if (depth == 2) {
+        // + 虚拟地址加上最后一级页表号，之后再左挪12位
+        printf("idx: %d: va: %p -> pa: %p, flags: ", i, ((virt + i) << 12), pa);
       } else {
-        *dst = *p;
+        printf("idx: %d: pa: %p, flags: ", i, pa);
+      }
+
+      // + 增加BIT_MACRO和symbol数组用于打印flags
+      long BIT_MACRO[4] = {PTE_R, PTE_W, PTE_X, PTE_U};
+      char symbol[][4] = {"r", "w", "x", "u"};
+      for (int i = 0; i < 4; i++) {
+        if ((pte & BIT_MACRO[i]) != 0) {
+          printf("%s", symbol[i]);
+        } else {
+          printf("-");
+        }
+      }
+      printf("\n");
+      if ((pte & (PTE_R | PTE_W | PTE_X)) == 0) {
+        print_pgtbl((pagetable_t)pa, depth + 1, virt + i);
       }
-      --n;
-      --max;
-      p++;
-      dst++;
     }
+  }
+}
 
-    srcva = va0 + PGSIZE;
+// + vmprint definition
+void vmprint(pagetable_t pgtbl) {
+  printf("page table %p\n", pgtbl);
+  // 递归打印pte和pa
+  print_pgtbl(pgtbl, 0, 0L);
+}
+
+// + kvminit_for_each_process definition
+pagetable_t kvminit_for_each_process() {
+  pagetable_t k_pagetable = (pagetable_t)kalloc();
+  memset(k_pagetable, 0, PGSIZE);
+  // uart registers
+  kvmmap_for_each_process(k_pagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
+  // virtio mmio disk interface
+  kvmmap_for_each_process(k_pagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+  // 不映射CLINT
+  // PLIC
+  kvmmap_for_each_process(k_pagetable, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+  // map kernel text executable and read-only.
+  kvmmap_for_each_process(k_pagetable, KERNBASE, KERNBASE, (uint64)etext - KERNBASE, PTE_R | PTE_X);
+  // map kernel data and the physical RAM we'll make use of.
+  kvmmap_for_each_process(k_pagetable, (uint64)etext, (uint64)etext, PHYSTOP - (uint64)etext, PTE_R | PTE_W);
+  // map the trampoline for trap entry/exit to
+  // the highest virtual address in the kernel.
+  kvmmap_for_each_process(k_pagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+  return k_pagetable;
+}
+
+// + kvmmap_for_each_process definition
+void kvmmap_for_each_process(pagetable_t k_pagetable, uint64 va, uint64 pa, uint64 sz, int perm) {
+  if (mappages(k_pagetable, va, sz, pa, perm) != 0) {
+    panic("kvmmap");
   }
-  if (got_null) {
-    return 0;
-  } else {
-    return -1;
+}
+
+// + kvminithart_for_each_process definition
+void kvminithart_for_each_process(pagetable_t k_pagetable) {
+  w_satp(MAKE_SATP(k_pagetable));
+  sfence_vma();
+}
+
+void free_pagetable_except_for_leaf(pagetable_t pagetable) {
+  for (int i = 0; i < 512; i++) {
+    pte_t pte = pagetable[i];
+    if ((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0) {
+      uint64 pa = PTE2PA(pte);
+      free_pagetable_except_for_leaf((pagetable_t)pa);
+      pagetable[i] = 0;
+    }
+    pagetable[i] = 0;
   }
+  kfree((void*)pagetable);
 }
 
-// check if use global kpgtbl or not
-int test_pagetable() {
-  uint64 satp = r_satp();
-  uint64 gsatp = MAKE_SATP(kernel_pagetable);
-  printf("test_pagetable: %d\n", satp != gsatp);
-  return satp != gsatp;
-}
\ No newline at end of file
+int sync_pagetable(pagetable_t old, pagetable_t new, uint64 sz, uint64 sz_n) {
+  pte_t* pte;
+  uint64 pa, i;
+  uint flags;
+  sz = PGROUNDUP(sz);
+  for (i = sz; i < sz_n; i += PGSIZE) {
+    if ((pte = walk(old, i, 0)) == 0) {
+      panic("sync_pagetable:pte should exist");
+    }
+    if ((*pte & PTE_V) == 0) {
+        panic("sync_pagetable:page not present");
+    }
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte) & (~PTE_U);
+    if (mappages(new, i, PGSIZE, (uint64)pa, flags) != 0) {
+      goto err;
+    }
+  }
+  return 0;
+
+err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
+uint64 uvmdealloc_u_in_k(pagetable_t pagetable, uint64 oldsz, uint64 newsz) {
+  if (newsz >= oldsz) return oldsz;
+  if (PGROUNDUP(newsz) < PGROUNDUP(oldsz)) {
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0);
+  }
+  return newsz;
+}
diff --git a/user/sh.c b/user/sh.c
index 13c7d7c..6f1b5a8 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -54,6 +54,7 @@ void panic(char *);
 struct cmd *parsecmd(char *);
 
 // Execute cmd.  Never returns.
+__attribute__((noreturn))
 void runcmd(struct cmd *cmd) {
   int p[2];
   struct backcmd *bcmd;
